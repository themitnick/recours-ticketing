# Script PowerShell SIMPLE pour cr√©er la branche gh-pages

Write-Host "üöÄ Cr√©ation de la branche gh-pages..." -ForegroundColor Green

# Build du projet
Write-Host "üì¶ Build du projet..." -ForegroundColor Yellow
npm run build:github-pages

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erreur lors du build" -ForegroundColor Red
    exit 1
}

# Pr√©paration des fichiers
Write-Host "üìã Pr√©paration des fichiers..." -ForegroundColor Yellow
Copy-Item "dist/recours-ticketing/browser/index.html" "dist/recours-ticketing/browser/404.html"
New-Item -Path "dist/recours-ticketing/browser/.nojekyll" -ItemType File -Force | Out-Null

# Sauvegarder la branche actuelle
$currentBranch = git branch --show-current
Write-Host "üìç Branche actuelle: $currentBranch" -ForegroundColor Cyan

# Configuration Git
git config user.name "GitHub Actions"
git config user.email "actions@github.com"

# Supprimer l'ancienne branche gh-pages locale si elle existe
Write-Host "üóëÔ∏è Nettoyage..." -ForegroundColor Yellow
git branch -D gh-pages 2>$null

# Cr√©er la branche gh-pages
Write-Host "üÜï Cr√©ation de la branche gh-pages..." -ForegroundColor Yellow
git checkout --orphan gh-pages

# Supprimer tous les fichiers du working directory
git rm -rf . 2>$null

# Copier les fichiers build√©s
Write-Host "üìÇ Copie des fichiers..." -ForegroundColor Yellow
Copy-Item "dist/recours-ticketing/browser/*" -Destination "." -Recurse -Force
Copy-Item "dist/recours-ticketing/browser/.nojekyll" -Destination "." -Force -ErrorAction SilentlyContinue

# Ajouter et committer
Write-Host "üíæ Commit..." -ForegroundColor Yellow
git add .
git commit -m "Initial GitHub Pages deployment"

# Push vers GitHub
Write-Host "üöÄ Push vers GitHub..." -ForegroundColor Yellow
git push -f origin gh-pages

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ SUCCESS! Branche gh-pages cr√©√©e!" -ForegroundColor Green
    
    # Obtenir l'URL du repository
    $remoteUrl = git config --get remote.origin.url
    if ($remoteUrl -match "github\.com[:/]([^/]+)/([^.]+)") {
        $username = $matches[1]
        $reponame = $matches[2]
        Write-Host ""
        Write-Host "üåê Votre site sera disponible √†:" -ForegroundColor Cyan
        Write-Host "   https://$username.github.io/$reponame/" -ForegroundColor White
        Write-Host ""
        Write-Host "‚öôÔ∏è Configurez maintenant GitHub Pages:" -ForegroundColor Yellow
        Write-Host "   1. Allez dans Settings > Pages" -ForegroundColor White
        Write-Host "   2. Source: Deploy from a branch" -ForegroundColor White
        Write-Host "   3. Branch: gh-pages" -ForegroundColor White
        Write-Host "   4. Folder: / (root)" -ForegroundColor White
    }
} else {
    Write-Host "‚ùå Erreur lors du push" -ForegroundColor Red
}

# Retourner √† la branche originale
Write-Host "üîÑ Retour √† la branche $currentBranch..." -ForegroundColor Yellow
git checkout $currentBranch

Write-Host "‚ú® Termin√©!" -ForegroundColor Green
